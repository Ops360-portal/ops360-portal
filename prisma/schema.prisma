generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  EMPLOYEE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  domain      String?
  users       UserOrganization[]
  departments Department[]
  assets      Asset[]
  tickets     Ticket[]
  createdAt   DateTime           @default(now())
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())

  // org membership
  orgs UserOrganization[]

  // tickets (requester + assignee)
  tickets  Ticket[] @relation("TicketRequester")
  assigned Ticket[] @relation("TicketAssignee")

  // comments
  comments Comment[]

  // BACK-RELATION for Asset.assignedTo
  assetsAssigned Asset[] @relation("UserAssets")
}

model UserOrganization {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  role      Role         @default(EMPLOYEE)
  createdAt DateTime     @default(now())

  @@unique([userId, orgId])
}

model Department {
  id    String       @id @default(cuid())
  name  String
  org   Organization @relation(fields: [orgId], references: [id])
  orgId String

  // BACK-RELATION for Ticket.department
  tickets Ticket[]
}

model Asset {
  id        String  @id @default(cuid())
  tag       String  @unique
  type      String
  makeModel String?
  serial    String?

  // Assignee (optional) + back-relation on User
  assignedTo   User?   @relation("UserAssets", fields: [assignedToId], references: [id])
  assignedToId String?

  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  createdAt DateTime     @default(now())
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)

  org   Organization @relation(fields: [orgId], references: [id])
  orgId String

  requester   User   @relation("TicketRequester", fields: [requesterId], references: [id])
  requesterId String

  assignee   User?   @relation("TicketAssignee", fields: [assigneeId], references: [id])
  assigneeId String?

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  attachments Attachment[]
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  fileUrl   String
  mimeType  String?
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  createdAt DateTime @default(now())
}
